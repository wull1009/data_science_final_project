# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
tablag
plot(0:7,0:7,type="n",ylim=c(0.99,1.03),main="Lag terms modelled one at a time",
xlab="Lag (days)",ylab="RR and 95%CI per 10ug/m3 ozone increase")
abline(h=1)
arrows(0:7,tablag[,2],0:7,tablag[,3],length=0.05,angle=90,code=3)
points(0:7,tablag[,1],pch=19)
# FACILITATED BY THE FUNCTIONS IN PACKAGE dlnm, TO BE DOWNLOADED AND LOADED
# install.packages("dlnm")
library(dlnm)
# PRODUCE THE CROSS-BASIS FOR OZONE (SCALING NOT NEEDED)
# A SIMPLE UNSTRANSFORMED LINEAR TERM AND THE UNCONSTRAINED LAG STRUCTURE
cbo3unc <- crossbasis(data$ozone,lag=c(0,7),argvar=list(type="lin",cen=FALSE),
arglag=list(type="integer"))
summary(cbo3unc)
# PRODUCE THE CROSS-BASIS FOR TEMPERATURE
# AS ABOVE, BUT WITH STRATA DEFINED BY INTERNAL CUT-OFFS
cbtempunc <- crossbasis(data$temperature,lag=c(0,7),
argvar=list(type="strata",knots=cutoffs[2:10]),
arglag=list(type="integer"))
summary(cbtempunc)
# RUN THE MODEL AND OBTAIN PREDICTIONS FOR OZONE LEVEL 10ug/m3
model7 <- glm(numdeaths ~ cbo3unc + cbtempunc + spl,data,family=quasipoisson)
pred7 <- crosspred(cbo3unc,model7,at=10)
# ESTIMATED EFFECTS AT EACH LAG
tablag2 <- with(pred7,t(rbind(matRRfit,matRRlow,matRRhigh)))
colnames(tablag2) <- c("RR","ci.low","ci.hi")
tablag2
# OVERALL CUMULATIVE (NET) EFFECT
pred7$allRRfit ; pred7$allRRlow ; pred7$allRRhigh
plot(pred7,var=10,type="p",ci="bars",col=1,pch=19,ylim=c(0.99,1.03),
main="All lag terms modelled together (unconstrained)",xlab="Lag (days)",
ylab="RR and 95%CI per 10ug/m3 ozone increase")
# PRODUCE A DIFFERENT CROSS-BASIS FOR OZONE
# USE STRATA FOR LAG STRUCTURE, WITH CUT-OFFS DEFINING RIGHT-OPEN INTERVALS
cbo3constr <- crossbasis(data$ozone,lag=c(0,7),argvar=list(type="lin",cen=FALSE),
arglag=list(type="strata",knots=c(1,3)))
summary(cbo3constr)
# RUN THE MODEL AND OBTAIN PREDICTIONS FOR OZONE LEVEL 10ug/m3
model8 <- glm(numdeaths ~ cbo3constr + cbtempunc + spl,data,family=quasipoisson)
pred8 <- crosspred(cbo3constr,model8,at=10)
# ESTIMATED EFFECTS AT EACH LAG
tablag3 <- with(pred8,t(rbind(matRRfit,matRRlow,matRRhigh)))
colnames(tablag3) <- c("RR","ci.low","ci.hi")
tablag3
# OVERALL CUMULATIVE (NET) EFFECT
pred8$allRRfit ; pred8$allRRlow ; pred8$allRRhigh
plot(pred8,var=10,type="p",ci="bars",col=1,pch=19,ylim=c(0.99,1.03),
main="All lag terms modelled together (with costraints)",xlab="Lag (days)",
ylab="RR and 95%CI per 10ug/m3 ozone increase")
library(foreign) # ENABLES READING THE DATA FILE, WHICH IS A STATA FORMAT
data <- read.dta("D:/吴小妞/Emory/Causal Inference/air pollution/time-series regression/ije-2012-10-0989-File003.dta")
summary(data)
# SCALE EXPOSURE
data$ozone10 <- data$ozone/10
# GENERATE MONTH AND YEAR
data$month  <- as.factor(months(data$date))
data$year   <- as.factor(format(data$date, format="%Y") )
data$dow    <- as.factor(weekdays(data$date))
data$stratum <- as.factor(data$year:data$month:data$dow)
data <- data[order(data$date),]
# FIT A CONDITIONAL POISSON MODEL WITH A YEAR X MONTH X DOW STRATA
library(gnm)
modelcpr1 <- gnm(numdeaths ~ ozone10 + temperature, data=data, family=poisson,
eliminate=factor(stratum))
summary(modelcpr1)
# ALLOW FOR OVERDISPERSION
modelcpr2 <- gnm(numdeaths ~ ozone10 + temperature , data=data, family=quasipoisson,
eliminate=factor(stratum)  )
summary(modelcpr2) # ANTONIO - summary NOT WORKING ON MY PC
# ADD BRUMBACK AUTOCORRELATION ADJUSTMENT
library(tsModel)   # FACILITATES GETTING LAGGED VALUES'
reslag1 <- Lag(residuals(modelcpr1,type="deviance"),1)
modelcpr3 <- gnm(numdeaths ~ ozone10 +  temperature + reslag1, data=data,
family=quasipoisson, eliminate=factor(stratum))
summary(modelcpr3)
# ALLOW FOR AUTOCORRELATION AND OVERDISPERSION
library(tsModel)   # FACILITATES GETTING LAGGED VALUES'
reslag1 <- Lag(residuals(modelcpr1,type="deviance"),1)
modelcpr4 <- gnm(numdeaths ~ ozone10 +  temperature + reslag1, data=data,
family=quasipoisson, eliminate=factor(stratum))
summary(modelcpr4)
# ILLUSTRATION OF ALLOWING FOR VARYING RATE DENOMINATORS
#  FOR THIS WE HAVE IMAGINED AVAILABILITY OF A RELEVANT POPULATION MEASURE CHANGING
#  AT SHORT TIME SCALES
data$population <- 3000000
logpop <- log(data$population)
logpop
modelcpr5 <- gnm(numdeaths ~ ozone10 + temperature, data=data, family=poisson , offset=logpop,
eliminate=factor(stratum))
summary(modelcpr5)
#  FIT UNCONDITIONAL POISSON MODEL
model_upr <- glm(numdeaths ~ ozone10  + temperature + factor(stratum),data=data,family=poisson)
summary(model_upr)
# EXPAND THE DATA IN A CASE-CROSSOVER FORMAT (AND EXCLUDE STRATA WITH 0)
#  REQUIRED FUNCTION
funccmake <-  function(date,cases,vars=NULL,dow) {
#
# DERIVE STRATUM VARIABLES
if(missing(dow)) dow <- ifelse(class(date)=="Date",TRUE,FALSE)
if(class(date)=="Date") {
day <- if(dow) weekdays(date) else rep(1,length(date))
month <- months(date)
year <- format(date, format="%Y")
} else {
day <- rep(1,length(date))
month <- date
year <- rep(1,length(date))
if(dow) stop("'dow' only available when 'date' is a date")
}
#
# DERIVE INDEXING VARIABLES
gfactor <- factor(day):factor(month):factor(year)
gnumber <- match(gfactor,unique(gfactor))
gindex <- lapply(1:length(date),
function(x) (1:length(date))[gnumber%in%gnumber[x]])
gstatus <- lapply(1:length(date), function(x) gindex[[x]]==x)
#
# EXPAND PREDICTORS
if(!is.null(vars)) {
varnames <- if(is.vector(vars)) deparse(substitute(vars)) else names(vars)
vars <- as.matrix(vars)
dimnames(vars) <- list(NULL,varnames)
}
#
# RESULTS
res <- data.frame(
index=unlist(gindex),
status=unlist(gstatus)+0,
stratum=rep(1:length(date),sapply(gindex,length)),
weights=rep(cases,sapply(gindex,length))
)
if(!is.null(vars)) res <- cbind(res,vars[res$index,])
#
return(res)
}
dataexp <- funccmake(data$stratum,data$numdeaths,vars=cbind(data$ozone10,data$temperature ))
dataexp <- dataexp[dataexp$weights>0,]
Xexp <- as.matrix(dataexp)[,-seq(4)]
# RUN CLR
library(survival)
timeout <- as.numeric(factor(dataexp$stratum))
timein <- timeout-0.1
model_clr <- coxph(Surv(timein,timeout,status) ~ Xexp, weights=weights, dataexp)
summary(model_clr)
# BUILD A SUMMARY TABLE WITH EFFECT AS PERCENT INCREASE
tabeff <- rbind(eff4,eff5,eff6)[,5:7]
tabeff <- (tabeff-1)*100
dimnames(tabeff) <- list(c("Unadjusted","Plus season/trend","Plus temperature"),
c("RR","ci.low","ci.hi"))
round(tabeff,2)
summary(model6)
(eff6 <- ci.lin(model6,subset="ozone10",Exp=T))
round(tabeff,2)
#F分布
# 计算 F 分布的 0.975 分位数，自由度为 12 和 16
qf(0.975, df1 = 12, df2 = 16)
#F分布
# 计算 F 分布的 0.975 分位数，自由度为 12 和 16
qf(0.025, df1 = 12, df2 = 16)
#code 2:
x <- seq(0, 1, length=100)
library(splines)
par(mfrow= c(2, 2))
matplot(bs(x, degree=1, knots=c(0,.5,1)), type="l", main= "Degree=1")
matplot(bs(x, degree=2, knots=c(0,.5,1)), type="l", main= "Degree=2")
matplot(bs(x, degree=1, knots=c(0,.25,.5,1)), type="l", main= "Degree=1")
matplot(bs(x, degree=3, knots=c(0,.25,.5,1)), type="l", main= "Degree=3")
#code 3:natural spline
par(mfrow= c(2, 2))
matplot(ns(x,df=2), ylab= "", type="l", main="Df=2")
matplot(ns(x,df=3), ylab= "", type="l", main="Df=3")
matplot(ns(x,df=4), ylab= "", type="l", main="Df=4")
matplot(ns(x,df=5), ylab= "", type="l", main="Df=5")
#code 4
## function to define spline basis
pbase <- function(x, p) {
u <- (x - min(x)) / (max(x) - min(x))
u <- 2 * (u - 0.5)
P <- outer(u, seq(0, p, by = 1), "^")
P
}
## Data available in http://mfp.imbi.uni-freiburg.de/book
## load data into R session and assign x <- age ; y <- lntriceps
## define plotting parameters
vdist <- hdist <- 0.2
layout( matrix(1:4, 2, 2, byrow=TRUE), widths=c(10,10), heights=c(10, 10))
par(mar= c(vdist, 4, 3, hdist))
plot(x, y, ylab="", xlab="Age in years", axes=FALSE)
## Data available in http://mfp.imbi.uni-freiburg.de/book
## load data into R session and assign x <- age ; y <- lntricep
library(xlsx)
## Data available in http://mfp.imbi.uni-freiburg.de/book
## load data into R session and assign x <- age ; y <- lntricep
library(readxl)
data=read_excel("D:/吴小妞/Emory/Causal Inference/air pollution/triceps.xls")
head(data)
x=data$age
y=data$lntriceps
## define plotting parameters
vdist <- hdist <- 0.2
layout( matrix(1:4, 2, 2, byrow=TRUE), widths=c(10,10), heights=c(10, 10))
par(mar= c(vdist, 4, 3, hdist))
plot(x, y, ylab="", xlab="Age in years", axes=FALSE)
axis(2); axis(3); box()
abline(lm(y~x), lwd=2, lty=2)
U <- pbase(x,3)
lines(x, U %*% coef(lm(y~U-1)), lwd=2)
legend(0.05, 3.8, c("Linear", "Polynomial"), col=1, lty=1:2, bty="n")
par(mar= c(vdist, hdist, 3, 4))
plot(x, y, ylab="Triceps skinfold thickness in mm (log scale)", xlab="Age in years", axes=FALSE)
axis(3); axis(4); box()
## fit models
fit.poly <- lm(y ~ poly(x)) #polynomial spline
fit.bs <- lm(y ~ bs(x) ) # bspline
fit.ns <- lm(y ~ ns(x) ) #natural spline
fit.sp <- smooth.spline(y ~ x)
## add fit lines to the plot
lines(x, predict(fit.poly, data.frame(x=x)), col=1, lwd=2)
lines(x, predict(fit.bs, data.frame(x=x)), col=2, lwd=2)
lines(x, predict(fit.ns, data.frame(x=x)), col=3, lwd=2)
lines(fit.sp, col=4, lwd=2)
legend(0.05, 3.8, "default values", col=1, bty="n")
par(mar= c(5, 4, vdist, hdist))
plot(x, y, ylab="Triceps skinfold thickness in mm (log)", xlab="Age in years", axes=FALSE)
axis(1); axis(2); box()
## fit models
fit.poly.4 <- lm(y~ poly(x,4))
x
y
## define plotting parameters
vdist <- hdist <- 0.2
layout( matrix(1:4, 2, 2, byrow=TRUE), widths=c(10,10), heights=c(10, 10))
par(mar= c(vdist, 4, 3, hdist))
plot(x, y, ylab="", xlab="Age in years", axes=FALSE)
axis(2); axis(3); box()
abline(lm(y~x), lwd=2, lty=2)
U <- pbase(x,3)
lines(x, U %*% coef(lm(y~U-1)), lwd=2)
#code 4
## function to define spline basis
pbase <- function(x, p) {
u <- (x - min(x)) / (max(x) - min(x))
u <- 2 * (u - 0.5)
P <- outer(u, seq(0, p, by = 1), "^")
P
}
## Data available in http://mfp.imbi.uni-freiburg.de/book
## load data into R session and assign x <- age ; y <- lntricep
library(readxl)
data=read_excel("D:/吴小妞/Emory/Causal Inference/air pollution/triceps.xls")
head(data)
x=data$age
y=data$lntriceps
## define plotting parameters
vdist <- hdist <- 0.2
layout( matrix(1:4, 2, 2, byrow=TRUE), widths=c(10,10), heights=c(10, 10))
par(mar= c(vdist, 4, 3, hdist))
plot(x, y, ylab="", xlab="Age in years", axes=FALSE)
axis(2); axis(3); box()
abline(lm(y~x), lwd=2, lty=2)
U <- pbase(x,3)
lines(x, U %*% coef(lm(y~U-1)), lwd=2)
legend(0.05, 3.8, c("Linear", "Polynomial"), col=1, lty=1:2, bty="n")
par(mar= c(vdist, hdist, 3, 4))
plot(x, y, ylab="Triceps skinfold thickness in mm (log scale)", xlab="Age in years", axes=FALSE)
axis(3); axis(4); box()
## fit models
fit.poly <- lm(y ~ poly(x)) #polynomial spline
fit.bs <- lm(y ~ bs(x) ) # bspline
fit.ns <- lm(y ~ ns(x) ) #natural spline
fit.sp <- smooth.spline(y ~ x)
## add fit lines to the plot
lines(x, predict(fit.poly, data.frame(x=x)), col=1, lwd=2)
lines(x, predict(fit.bs, data.frame(x=x)), col=2, lwd=2)
lines(x, predict(fit.ns, data.frame(x=x)), col=3, lwd=2)
lines(fit.sp, col=4, lwd=2)
legend(0.05, 3.8, "default values", col=1, bty="n")
par(mar= c(5, 4, vdist, hdist))
plot(x, y, ylab="Triceps skinfold thickness in mm (log)", xlab="Age in years", axes=FALSE)
axis(1); axis(2); box()
## fit models
fit.poly.4 <- lm(y~ poly(x,4))
fit.bs.4 <- lm(y~ bs(x, df=4) )
fit.ns.4 <- lm(y~ ns(x, df=4) )
fit.sp <- smooth.spline(y~ x, df=4)
## add fit lines to the plot
lines(x, predict(fit.poly.4, data.frame(x=x)), col=1, lwd=2)
lines(x, predict(fit.bs.4, data.frame(x=x)), col=2, lwd=2)
lines(x, predict(fit.ns.4, data.frame(x=x)), col=3, lwd=2)
lines(fit.sp, col=4, lwd=2)
legend(0.05, 3.8, "4 degrees of freedom", col=1, bty="n")
par(mar= c(5, hdist, vdist, 4))
plot(x, y, ylab="Triceps skinfold thickness in mm (log)", xlab="Age in years", axes=FALSE)
axis(1); axis(4); box()
## fit models
fit.poly.10 <- lm(y~ poly(x,10))
fit.bs.10 <- lm(y~ bs(x, df=10) )
fit.ns.10 <- lm(y~ ns(x, df=10) )
fit.sp <- smooth.spline(y ~ x, df=10)
## add fit lines to the plot
lines(x, predict(fit.poly.10, data.frame(x=x)), col=1, lwd=2)
lines(x, predict(fit.bs.10, data.frame(x=x)), col=2, lwd=2)
lines(x, predict(fit.ns.10, data.frame(x=x)), col=3, lwd=2)
lines(fit.sp, col=4,lwd=2)
legend(0.05, 3.8, "10 degrees of freedom", col=1, bty="n")
layout(matrix(1, 1, 1))
x
y
## define plotting parameters
vdist <- hdist <- 0.2
layout( matrix(1:4, 2, 2, byrow=TRUE), widths=c(10,10), heights=c(10, 10))
par(mar= c(vdist, 4, 3, hdist))
plot(x, y, ylab="", xlab="Age in years", axes=FALSE)
axis(2); axis(3); box()
abline(lm(y~x), lwd=2, lty=2)
U <- pbase(x,3)
lines(x, U %*% coef(lm(y~U-1)), lwd=2)
legend(0.05, 3.8, c("Linear", "Polynomial"), col=1, lty=1:2, bty="n")
par(mar= c(vdist, hdist, 3, 4))
plot(x, y, ylab="Triceps skinfold thickness in mm (log scale)", xlab="Age in years", axes=FALSE)
axis(3); axis(4); box()
## fit models
fit.poly <- lm(y ~ poly(x)) #polynomial spline
fit.bs <- lm(y ~ bs(x) ) # bspline
fit.ns <- lm(y ~ ns(x) ) #natural spline
fit.sp <- smooth.spline(y ~ x)
## add fit lines to the plot
lines(x, predict(fit.poly, data.frame(x=x)), col=1, lwd=2)
lines(x, predict(fit.bs, data.frame(x=x)), col=2, lwd=2)
lines(x, predict(fit.ns, data.frame(x=x)), col=3, lwd=2)
lines(fit.sp, col=4, lwd=2)
legend(0.05, 3.8, "default values", col=1, bty="n")
par(mar= c(5, 4, vdist, hdist))
plot(x, y, ylab="Triceps skinfold thickness in mm (log)", xlab="Age in years", axes=FALSE)
axis(1); axis(2); box()
## fit models
fit.poly.4 <- lm(y~ poly(x,4))
fit.bs.4 <- lm(y~ bs(x, df=4) )
fit.ns.4 <- lm(y~ ns(x, df=4) )
fit.sp <- smooth.spline(y~ x, df=4)
## add fit lines to the plot
lines(x, predict(fit.poly.4, data.frame(x=x)), col=1, lwd=2)
lines(x, predict(fit.bs.4, data.frame(x=x)), col=2, lwd=2)
lines(x, predict(fit.ns.4, data.frame(x=x)), col=3, lwd=2)
lines(fit.sp, col=4, lwd=2)
legend(0.05, 3.8, "4 degrees of freedom", col=1, bty="n")
par(mar= c(5, hdist, vdist, 4))
plot(x, y, ylab="Triceps skinfold thickness in mm (log)", xlab="Age in years", axes=FALSE)
axis(1); axis(4); box()
## fit models
fit.poly.10 <- lm(y~ poly(x,10))
fit.bs.10 <- lm(y~ bs(x, df=10) )
fit.ns.10 <- lm(y~ ns(x, df=10) )
fit.sp <- smooth.spline(y ~ x, df=10)
## add fit lines to the plot
lines(x, predict(fit.poly.10, data.frame(x=x)), col=1, lwd=2)
lines(x, predict(fit.bs.10, data.frame(x=x)), col=2, lwd=2)
lines(x, predict(fit.ns.10, data.frame(x=x)), col=3, lwd=2)
lines(fit.sp, col=4,lwd=2)
legend(0.05, 3.8, "10 degrees of freedom", col=1, bty="n")
layout(matrix(1, 1, 1))
# code 1: truncated splines
U <- seq(0, 1, length=100)
D <- 3 # degree of series
K <- 5 # number of knots
knots <- (1:K) / (K+1) # creates a series of K equidistant knots
X1 <- outer (U, 1:D, "^") #B1(X)
X2 <- outer (U, knots,">") * outer (U, knots, "-")^D # Bd+2(X)
Bt <- cbind (X1, X2)
matplot(U, Bt,"l", lwd=2, col= 1:ncol(Bt))
#code 2:B-Splines
x <- seq(0, 1, length=100)
library(splines)
par(mfrow= c(2, 2))
matplot(bs(x, degree=1, knots=c(0,.5,1)), type="l", main= "Degree=1")
matplot(bs(x, degree=2, knots=c(0,.5,1)), type="l", main= "Degree=2")
matplot(bs(x, degree=1, knots=c(0,.25,.5,1)), type="l", main= "Degree=1")
matplot(bs(x, degree=3, knots=c(0,.25,.5,1)), type="l", main= "Degree=3")
#code 3:natural spline
par(mfrow= c(2, 2))
matplot(ns(x,df=2), ylab= "", type="l", main="Df=2")
matplot(ns(x,df=3), ylab= "", type="l", main="Df=3")
matplot(ns(x,df=4), ylab= "", type="l", main="Df=4")
matplot(ns(x,df=5), ylab= "", type="l", main="Df=5")
# LOAD THE DATA INTO THE SESSION
# (THE DATA ARE STORED IN A STATA'S .dta FILE)
# (THE FUNCTION read.dta IN THE PACKAGE foreign CAN DO THE JOB)
# (THE PACKAGE IS NOT PRE-LOADED INTO THE SESSION AND NEEDS TO BE LOADED)
library(foreign)
data <- read.dta("D:/吴小妞/Emory/Causal Inference/air pollution/time-series regression/ije-2012-10-0989-File003.dta")
data=read.csv("D:/data science/midterm project/covid_sub.csv")
head(data)
data$CLASIFFICATION_FINAL
# 按 classification 和 sex 绘制 age 的小提琴图
ggplot(data, aes(x = factor(CLASIFFICATION_FINAL), y = AGE, fill = factor(SEX))) +
geom_violin(trim = FALSE) +
labs(x = "Classification", y = "Age",
title = "Age Distribution by Classification and Sex") +
theme_minimal()
# 按 classification 和 sex 绘制 age 的小提琴图
library(ggplot2)
ggplot(data, aes(x = factor(CLASIFFICATION_FINAL), y = AGE, fill = factor(SEX))) +
geom_violin(trim = FALSE) +
labs(x = "Classification", y = "Age",
title = "Age Distribution by Classification and Sex") +
theme_minimal()
# 按 classification 和 sex 绘制 age 的箱线图
ggplot(data, aes(x = factor(CLASIFFICATION_FINAL), y = AGE, fill = factor(SEX))) +
geom_boxplot() +
labs(x = "Classification", y = "Age",
title = "Age Distribution by Classification and Sex") +
theme_minimal()
# 绘制年龄的概率密度函数图，按性别分类
ggplot(data, aes(x = AGE, color = factor(SEX), fill = factor(SEX))) +
geom_density(alpha = 0.4) +
labs(x = "Age", y = "Density", title = "Age Density Distribution by Sex") +
theme_minimal() +
scale_fill_manual(values = c("blue", "pink")) +  # 可选：自定义颜色
scale_color_manual(values = c("blue", "pink"))   # 可选：自定义颜色
# 绘制年龄的概率密度函数图，按性别分类
ggplot(data, aes(x = AGE, color = factor(SEX), fill = factor(SEX))) +
geom_density(alpha = 0.4) +
labs(x = "Age", y = "Density", title = "Age Density Distribution by Sex") +
theme_minimal() +
scale_fill_manual(values = c("green", "pink")) +  # 可选：自定义颜色
scale_color_manual(values = c("green", "pink"))   # 可选：自定义颜色
# 绘制年龄的概率密度函数图，按性别分类
ggplot(data, aes(x = AGE, color = factor(SEX), fill = factor(SEX))) +
geom_density(alpha = 0.4) +
labs(x = "Age", y = "Density", title = "Age Density Distribution by Sex") +
theme_minimal() +
scale_fill_manual(values = c("#ffc75f", "#d65db1")) +  # 可选：自定义颜色
scale_color_manual(values = c("#ffc75f", "#d65db1"))   # 可选：自定义颜色
ggplot(data, aes(x = factor(CLASIFFICATION_FINAL), y = AGE, fill = factor(SEX))) +
geom_boxplot() +
labs(x = "Classification", y = "Age",
title = "Age Distribution by Classification and Sex") +
theme_minimal()+
scale_fill_manual(values = c("#ffc75f", "#d65db1")) +  # 可选：自定义颜色
scale_color_manual(values = c("#ffc75f", "#d65db1"))   # 可选：自定义颜色
ggplot(data, aes(x = AGE, color = factor(SEX), fill = factor(SEX))) +
geom_density(alpha = 0.4) +
labs(x = "Age", y = "Density", title = "Age Density Distribution by Sex") +
theme_minimal() +
scale_fill_manual(values = c("#ffc75f", "#d65db1")) +  # 可选：自定义颜色
scale_color_manual(values = c("#ffc75f", "#d65db1"))   # 可选：自定义颜色
ggplot(data, aes(x = factor(CLASIFFICATION_FINAL), y = AGE, fill = factor(SEX))) +
geom_boxplot() +
labs(x = "Classification", y = "Age",
title = "Age Distribution by Classification and Sex") +
theme_minimal()+
scale_fill_manual(values = c("#ff9671", "#845ec2")) +  # 可选：自定义颜色
scale_color_manual(values = c("#ff9671", "#845ec2"))   # 可选：自定义颜色
getwd()
setwd("D:/吴小妞/Emory/2024 Fall/Data Science/Final Project")
here::i_am("report.Rmd")
library("gridExtra")
a=read.csv("data_smoke.csv",header=T,encoding = "UTF-8")
head(a)
options(warn = -1)
a$sex[which(a$sex=='female')]=1
a$sex[which(a$sex=='male')]=0
a$smoker[which(a$smoker=='yes')]=1
a$smoker[which(a$smoker=='no')]=0
a$sex=as.numeric(a$sex)
a$smoker=as.numeric(a$smoker)
head(a)
a=a[-9]
a1=a[c(1:1070),]
library(ggplot2)
library(magick)
a$sex=as.factor(a$sex)
image_read(
here::here("output3/output3.png")
)
image_read(
here::here("output5/output5.png")
)
options(warn = -1)
readRDS(
here::here("output1/output1.rds")
)
readRDS(
here::here("output2/output2.rds")
)
library(rmarkdown)
#! TO DO:
#!   add call to here::i_am
here::i_am("code/02_render_report.R")
make
image_read(
here::here("output5/output5.png")
)
image_read(here::here("output6/output6.png")
)
image_read(
here::here("output3/output3.png")
)
image_read(
here::here("output5/output5.png")
)
image_read(
here::here("output3/output3.png")
)
image_read(
here::here("output4/output4.png")
)
